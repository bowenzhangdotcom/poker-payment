{"version":3,"sources":["App.module.css","components/FileSubmit/FileSubmit.module.css","components/FileSubmit/FileSubmit.jsx","components/ResultsTable/ResultsTable.jsx","api/index.js","App.js","index.js"],"names":["module","exports","useStyles","makeStyles","myDropZone","background","borderColor","minHeight","borderWidth","borderStyle","myDropZoneText","fontSize","paddingLeft","paddingRight","marginTop","FileSubmit","props","classes","className","styles","DropzoneAreaContainer","onChange","handleFileChange","dropzoneText","filesLimit","showPreviewsInDropzone","useChipsForPreview","dropzoneClass","dropzoneParagraphClass","ResultsTable","rows","ledger","this","data","i","length","push","TextRow","id","React","Component","heapConversion","papaCSV","source","csvData","pokerNowData","obj","row","Object","keys","name","parseInt","processPokerNow","minArray","maxArray","balanceCheck","key","person","balance","arr","alert","minPQ","Heap","a","b","init","maxPQ","resultArray","size","Winner","Loser","Amount","down","poll","up","diff","add","processRawData","rawData","dataSource","identifyData","App","state","event","Papa","parse","header","complete","results","ledgerData","setState","processedData","Body","SubmitContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d29500f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SubmitContainer\":\"App_SubmitContainer__1B5DM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropzoneAreaContainer\":\"FileSubmit_DropzoneAreaContainer__3mwDz\"};","import React from 'react'\nimport styles from \"./FileSubmit.module.css\";\nimport { DropzoneArea } from 'material-ui-dropzone';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  myDropZone: {\n    background: '#f1f1f1',\n    borderColor: '#04957D',\n    minHeight: '200px',\n    borderWidth: \"1px\",\n    borderStyle: \"dashed\"\n  },\n  myDropZoneText: {\n    fontSize: \"20px\",\n    paddingLeft: \"2.5%\",\n    paddingRight: \"2.5%\",\n    marginTop: \"10%\",\n  }\n});\n\nexport default function FileSubmit(props) {\n  const classes = useStyles();\n  return (\n    <div className={styles.DropzoneAreaContainer}>\n      <DropzoneArea\n        onChange={props.handleFileChange}\n        dropzoneText={\"Select your PokerNow CSV or drag here\"}\n        filesLimit={1}\n        showPreviewsInDropzone = {true}\n        useChipsForPreview ={true}\n        dropzoneClass={classes.myDropZone}\n        dropzoneParagraphClass={classes.myDropZoneText}\n      />\n    </div>\n   )\n  }","import React from 'react';\nimport styles from './ResultsTable.module.css';\n\nclass ResultsTable extends React.Component{\n    render() {\n        let rows = [];\n        const ledger = this.props.data\n        for (let i = 0; i < ledger.length; i++){\n            rows.push(\n            <div className={styles.TextRow} key={i}>\n                {ledger[i][\"Loser\"]} pays {ledger[i][\"Winner\"]} ${ledger[i][\"Amount\"]}\n            </div>);\n        }\n        return (\n            <div id='ResultsTable' className={styles.ResultsTable}>\n                {rows}\n            </div>\n        );\n    }\n}\n\nexport default ResultsTable;","import { Heap } from \"heap-js\";\n\nconst identifyData = (rawData) => {\n  let data = rawData.data[0];\n  if (\n    \"buy_in\" in data &&\n    \"buy_out\" in data &&\n    \"net\" in data &&\n    \"player_id\" in data &&\n    \"player_nickname\" in data &&\n    \"session_end_at\" in data &&\n    \"session_start_at\" in data &&\n    \"stack\" in data\n  ) {\n    return \"PokerNow\";\n  }\n  alert(\"Invalid data source - check that the file is the original export!\");\n};\n\nconst processPokerNow = (pokerNowData) => {\n  let obj = {};\n  for (let i = 0; i < pokerNowData.length; i++) {\n    let row = pokerNowData[i];\n    if (Object.keys(row).length > 1) {\n      let name = `${row[\"player_nickname\"]} (${row[\"player_id\"]})`;\n      if (!(name in obj)) {\n        obj[name] = 0;\n      }\n      obj[name] += parseInt(row[\"net\"]);\n    }\n  }\n  return obj;\n};\n\nconst heapConversion = (papaCSV, source) => {\n  let csvData = {};\n  if (source === \"PokerNow\") {\n    csvData = processPokerNow(papaCSV.data);\n  }\n  let minArray = [];\n  let maxArray = [];\n  let balanceCheck = 0;\n\n  for (let key of Object.keys(csvData)) {\n    let person = key;\n    let balance = csvData[key];\n    let arr = [person, balance];\n    if (balance < 0) {\n      minArray.push(arr);\n    } else {\n      maxArray.push(arr);\n    }\n    balanceCheck += balance;\n  }\n\n  if (balanceCheck !== 0) {\n    alert(\"Your net total doesn't add up to 0\");\n  }\n\n  const minPriorityComparator = (a, b) => a[1] - b[1];\n  const minPQ = new Heap(minPriorityComparator);\n  minPQ.init(minArray);\n\n  const maxPriorityComparator = (a, b) => b[1] - a[1];\n  const maxPQ = new Heap(maxPriorityComparator);\n  maxPQ.init(maxArray);\n\n  let resultArray = [];\n  while (minPQ.size() > 0 && maxPQ.size() > 0) {\n    let obj = {\n      Winner: \"\",\n      Loser: \"\",\n      Amount: \"\",\n    };\n    let down = minPQ.poll();\n    let up = maxPQ.poll();\n    obj[\"Winner\"] = up[0];\n    obj[\"Loser\"] = down[0];\n    let diff = up[1] + down[1];\n    if (diff < 0) {\n      obj[\"Amount\"] = up[1];\n      minPQ.add([down[0], diff]);\n    }\n    if (diff > 0) {\n      obj[\"Amount\"] = -down[1];\n      maxPQ.add([up[0], diff]);\n    } else {\n      obj[\"Amount\"] = up[1];\n    }\n    resultArray.push(obj);\n  }\n  return resultArray;\n};\n\nconst processRawData = (rawData) => {\n  let dataSource = identifyData(rawData);\n  let resultArray = heapConversion(rawData, dataSource);\n  return resultArray;\n};\nexport { processRawData };\n","import React from \"react\";\nimport styles from \"./App.module.css\";\nimport Papa from \"papaparse\";\nimport FileSubmit from \"./components/FileSubmit/FileSubmit\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport { processRawData } from \"./api/index.js\";\nclass App extends React.Component {\n  state = {};\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      processedData: [\n        {\n          Winner: \"Winner1\",\n          Loser: \"Loser1\",\n          Amount: 1,\n        },\n        {\n          Winner: \"Winner2\",\n          Loser: \"Loser2\",\n          Amount: 2,\n        },\n        {\n          Winner: \"Winner3\",\n          Loser: \"Loser3\",\n          Amount: 3,\n        },\n      ],\n    };\n  }\n\n  handleFileChange = (event) => {\n    if (event.length > 0) {\n      Papa.parse(event[0], {\n        header: true,\n        complete: (results) => {\n          let ledgerData = processRawData(results);\n          this.setState({ processedData: ledgerData });\n        },\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className={styles.Body}>\n        <h1>PokerNow Payments</h1>\n        <div className={styles.SubmitContainer}>\n          <FileSubmit handleFileChange={this.handleFileChange} />\n        </div>\n        <h2>Payments</h2>\n        <div className={styles.ResultsTable}>\n          <ResultsTable data={this.state.processedData} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}